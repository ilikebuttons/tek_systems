use mock_sba;

-- 1. Create a query to return all orders made by users with the first name of “Marion”
SELECT * FROM ORDERS AS O
INNER JOIN USERS AS U ON O.USER_ID = U.USER_ID
WHERE U.FIRST_NAME LIKE 'Marion';

-- 2. Create a query to select all users that have not made an order
SELECT * FROM USERS WHERE USER_ID NOT IN(SELECT USER_ID FROM ORDERS);
-- INNER JOIN ORDERS AS O ON U.USER_ID = O.USER_ID

-- 3. Create a Query to select the names and prices of all items that have been part of 2 or more separate orders.
SELECT DISTINCT NAME, PRICE
FROM ITEMS AS I
INNER JOIN ORDER_ITEMS AS OI ON I.ITEM_ID = OI.ITEM_ID
INNER JOIN ORDERS AS O ON OI.ORDER_ID = O.ORDER_ID
WHERE (SELECT COUNT(*) FROM ORDERS) >= 2;
-- GROUP BY I.NAME;


-- 4. Create a query to return the Order Id, Item name, Item Price, and Quantity from orders made at stores in the city “New York”.
--    Order by Order Id in ascending order.
SELECT O.ORDER_ID, I.NAME, I.PRICE, OI.QUANTITY
FROM ORDERS AS O
INNER JOIN ORDER_ITEMS AS OI ON O.ORDER_ID = OI.ORDER_ID
INNER JOIN ITEMS AS I ON OI.ITEM_ID = I.ITEM_ID
INNER JOIN STORES AS S ON S.STORE_ID = O.STORE_ID
WHERE S.CITY = 'New York'
ORDER BY O.ORDER_ID;


-- 5. Your boss would like you to create a query that calculates the total revenue generated by each item.
--    Revenue for an item can be found as (Item Price * Total Quantity Ordered).
--    Please return the first column as ‘ITEM_NAME’ and the second column as ‘REVENUE’.
SELECT I.NAME AS `ITEM_NAME`, SUM(I.PRICE * OI.QUANTITY) AS `REVENUE`
FROM ITEMS AS I
INNER JOIN ORDER_ITEMS AS OI ON I.ITEM_ID = OI.ITEM_ID
GROUP BY I.ITEM_ID;

/* 6. Create a query with the following output:
		a. Column 1 - Store Name
			i. The name of each store
		b. Column 2 - Order Quantity
			i. The number of times an order has been made in this store
		c. Column 3 - Sales Figure
			i. If the store has been involved in more than 3 orders, mark as ‘High’
			ii. If the store has been involved in less than 3 orders but more than 1 order, mark as ‘Medium’
			iii. If the store has been involved with 1 or less orders, mark as ‘Low’
		d. Should be ordered by the Order Quantity in Descending Order 	*/
SELECT S.NAME AS `Store Name`, COUNT(O.ORDER_ID) AS `Order Quantity`,
CASE
	WHEN COUNT(O.ORDER_ID) > 3 	THEN 'High'
	WHEN COUNT(O.ORDER_ID) > 1 	THEN 'Medium'
	WHEN COUNT(O.ORDER_ID) <= 1 THEN 'Low'
END AS `Sales Figure`
FROM STORES AS S
INNER JOIN ORDERS AS O ON S.STORE_ID = O.STORE_ID
GROUP BY S.STORE_ID;